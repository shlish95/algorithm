package inflearn.dfs_bfs;

import java.util.Scanner;

/* 1. 합이 같은 부분집합(DFS)_혼자 풀어 봄
N개의 원소로 구성된 자연수 집합을 두 개로 나누었을 때 서로의 합이 같으면 YES, 틀리면 NO 출력

첫 줄에는 자연수 N, 다음 줄에는 원소 N개가 주어짐

입력 예시
6
1 3 5 6 7 10

출력 예시
YES
 */
public class Dfs_Bfs01_mine {
    static int N, sum = 0, set = 0;         //자연수의 개수 N, 원소들의 합 sum, 부분집합의 합 set 변수
    static int[]arr;                        //입력된 원소를 대입할 arr, 원소의 여부를 표현 할 ch 배열

    private void DFS(int v) {
        if (sum % 2 == 1) {                 //전체 집합의 합이 홀수이면
            System.out.println("NO");       //합이 같은 두개의 부분집합으로 나눌 수 없으므로 NO출력
            return;                         //메서드 종료
        }

        if (v + 1 > N) {                    //v는 인덱스 값이므로 배열 크기인 N보다 크면
            return;                         //메서드 종료
        } else {
            set += arr[v];                  //부분 집합의 합 set에 v번째 값 더해줌

            if (set == sum / 2) {           //set이 sum/2 와 같다면
                System.out.println("YES");  //YES 출력
                return;                     //메서드 종료
            } else if (set < sum / 2) {     //set이 더 작다면
                DFS(v + 1);              //v+1을 매개변수로 재귀 호출
                DFS(v + 1);              //원소가 부분 집합에 포함 될 때, 안될 때 두 번 호출

            } else {                        //set이 더 크다며
                set -= arr[v];              //이 전에 더했던 원소 제거 후

                DFS(v + 1);              //v+1을 매개변수로 재귀 호출
                DFS(v + 1);              //원소가 부분 집합에 포함 될 때, 안될 때 두 번 호출
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        arr = new int[N];

        for (int i = N - 1; i >= 0; i--) {      //큰 부터 비교하기 위해 뒤에서 부터 대입
            arr[i] = sc.nextInt();
            sum += arr[i];                      //원소들의 전체 합
        }


        Dfs_Bfs01_mine d = new Dfs_Bfs01_mine();
        d.DFS(0);                            //매개변수로 0을 넣어 배열의 0번째 원소로 시작
    }
}
